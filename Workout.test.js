import { jest } from "@jest/globals"; // üîπ Oikea tapa tuoda jest-mock ESM-moduuleissa
import { Workout } from "./Workout.js";
import logger from "./logger.js";

// Teht√§v√§ 5c: Spy-testin toteutus logituksen tarkistamiseen
describe("Lokituksen testaus - Teht√§v√§ 5c", () => {
    test("varmistaa, ett√§ logger.info kutsutaan oikeilla argumenteilla", () => {
        // ARRANGE: Luodaan vakooja (spy) loggaustoiminnolle
        const loggerSpy = jest.spyOn(logger, "info");
        const workout = new Workout();
        
        // ACT: Lis√§t√§√§n harjoitus ja tarkistetaan logitus
        workout.addExercise("squats");
        
        // ASSERT: Tarkistetaan, ett√§ logger.info kutsuttiin kerran oikeilla argumenteilla
        expect(loggerSpy).toHaveBeenCalledTimes(1);
        expect(loggerSpy).toHaveBeenCalledWith(expect.objectContaining({
            level: 30,
            workoutId: 1,
            exerciseName: "squats",
            msg: "Exercise squats added to workout 1"
        }));

        // Puhdistetaan vakooja testin j√§lkeen
        loggerSpy.mockRestore();
    });
});

// Teht√§v√§ 5e: Stub korvaamaan logger.info testin ajaksi
describe("Lokituksen stub-testaus - Teht√§v√§ 5e", () => {
    test("stub korvaa logger.info eik√§ tulosta testin aikana", () => {
        // ARRANGE: Luodaan stub loggerille
        const loggerStub = jest.spyOn(logger, "info").mockImplementation(() => {});

        const workout = new Workout();

        // ACT: Lis√§t√§√§n harjoitus, mutta lokiviesti ei tulostu
        workout.addExercise("pushups");

        // ASSERT: Tarkistetaan, ett√§ logger.info kutsuttiin kerran
        expect(loggerStub).toHaveBeenCalledTimes(1);
        expect(loggerStub).toHaveBeenCalledWith(expect.objectContaining({
            exerciseName: "pushups"
        }));

        // Puhdistetaan stub testin j√§lkeen
        loggerStub.mockRestore();
    });
});

// Teht√§v√§ 6b: Mocking imports
describe("Mocking imports - Teht√§v√§ 6b", () => {
    test("varmistaa, ett√§ logger.info voidaan mockata ilman oikeaa kutsua", () => {
        // ARRANGE: Luodaan mock loggerille testin sis√§ll√§
        const loggerMock = jest.spyOn(logger, "info").mockImplementation(() => {});

        const workout = new Workout();
        
        // ACT: Lis√§t√§√§n harjoitus, mutta mockauksen ansiosta lokiviesti√§ ei tulosteta
        workout.addExercise("mocked-exercise");
        
        // ASSERT: Tarkistetaan, ett√§ mockattu logger.info kutsuttiin kerran
        expect(loggerMock).toHaveBeenCalledTimes(1);
        expect(loggerMock).toHaveBeenCalledWith(expect.objectContaining({
            exerciseName: "mocked-exercise"
        }));

        // Puhdistetaan mock testin j√§lkeen
        loggerMock.mockRestore();
    });
});
